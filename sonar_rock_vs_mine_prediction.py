# -*- coding: utf-8 -*-
"""Sonar Rock vs mine prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c73rYUu4TZw9peD6XmF4wFLXlbybqE2x

## **Importing the libraries**
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""# ***Data collection and pre-processing***"""

#load dataset into the pandas dataframe
s_data= pd.read_csv('/content/Copy of sonar data.csv', header=None)

s_data.head()

#Statical information
s_data.describe()

# no. of rows and columns
s_data.shape

"""
> R-->> rock
  M-->> Mine

"""

s_data[60].value_counts()

#Group data
s_data.groupby(60).mean()

""">* Separating data and lable (Supervied learning)*

"""

X= s_data.drop(columns=60, axis=1)
Y= s_data[60]

print(X)
print(Y)

"""**Training Testing data**"""

X_train,  X_test,Y_train, Y_test= train_test_split(X, Y, test_size = 0.1, stratify=Y, random_state=1)

print(X.shape, X_train.shape, X_test.shape)

print(X_train)
print(Y_train)

"""# **Model** **Training**"""

#logistic Regression
ml_model= LogisticRegression()

#training logistic Regression with X_train
ml_model.fit(X_train, Y_train)

"""# **Model Accuracy check**

> Training data accuracy
"""

x_train_predict= ml_model.predict(X_train)

train_data_accu = accuracy_score(x_train_predict, Y_train)

print('Accuracy on training data: ',train_data_accu)

"""

> Testing data accuracy
"""

x_test_predict= ml_model.predict(X_test)
test_data_accu = accuracy_score(x_test_predict, Y_test)

print('Accuracy on testing data: ',test_data_accu)

"""# **Predictive System**"""

#taking an example
input = (0.0307,0.0523,0.0653,0.0521,0.0611,0.0577,0.0665,0.0664,0.1460,0.2792,0.3877,0.4992,0.4981,0.4972,0.5607,0.7339,0.8230,0.9173,0.9975,0.9911,0.8240,0.6498,0.5980,0.4862,0.3150,0.1543,0.0989,0.0284,0.1008,0.2636,0.2694,0.2930,0.2925,0.3998,0.3660,0.3172,0.4609,0.4374,0.1820,0.3376,0.6202,0.4448,0.1863,0.1420,0.0589,0.0576,0.0672,0.0269,0.0245,0.0190,0.0063,0.0321,0.0189,0.0137,0.0277,0.0152,0.0052,0.0121,0.0124,0.0055)

# change the input to a numpy array
input_as_numpy_arr = np.asarray(input)

# reshape the np array as we are predicting for one instance
input_data_reshaped = input_as_numpy_arr.reshape(1,-1)

prediction = ml_model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]=='R'):
  print('The object is a Rock')
else:
  print('The object is a Mine')